ViewSet Class

- list()
- retrieve()
- create()
- update()
- partial_update()
- destroy()

-----------  Snippet  ----------------

from rest_framework import viewsets

class StudentViewSet(viewsets.ViewSet):
	def list(self, request):
	def create(self, request):
	def retrieve(self, request, pk=None):
	def update(self, request, pk=None):
	def partial_update(self, request, pk=None):
	def destroy(self, request, pk=None):
----------------------------------------

During dispatch, the following attributes are available on the ViewSet:
- basename - The base to use for the URL names that are created.
- action - The name of the current action (eg. list, create).
- detail - boolean indicating if the current action is configured for a list or detail view.
- suffix - The display suffix for the viewset type - mirrors the detail attribute.
- name - The display name for the viewset. This argument is mutually exclusive to suffix.
- description - The display description for the individual view of a viewset.


ViewSet - URL Config
----------------------
from django.urls import path, include
from api import views
from rest_framework.routers import DefaultRouter

router = DefaultRouter()  --> Creating Default Router Object

router.register('studentapi', views.StudentViewSet, basename='student')

urlpatterns = [
	path('', include(router.urls)),   --> The API URL's are now determined automatically by the router.
]

Sample Code
----------------------------------------
from rest_framework import viewsets
from rest_framework.response import Response
from rest_framework import status

class StudentViewSet(viewsets.ViewSet):
	def list(self, request):
		stu = Student.objects.all()
		serializer = StudentSerializer(stu, many=True)
		return Response(serializer.data)

	def create(self, request):
		serializer = StudentSerializer(data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response({'msg':'Data Created'}, status=status.HTTP_201_Created)
		return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

	def retrieve(self, request, pk=None):
		id = pk
		if id is not None:
			stu = Student.objects.get(id=id)
			serializer = StudentSerializer(stu)
			return Response(serializer.data)

	def update(self, request, pk=None):
		id=pk
		stu = Student.objects.get(pk=id)
		serializer = StudentSerializer(stu, data=request.data)
		if serializer.is_valid():
			serializer.save()
			return Response({'msg':'Complete Data Updated'})
		return Response(serializer.errors)

	def partial_update(self, request, pk=None):
		id=pk
		stu = Student.objects.get(pk=id)
		serializer = StudentSerializer(stu, data=request.data, partial=True)
		if serializer.is_valid():
			serializer.save()
			return Response({'msg':'Partial Data Updated'})
		return Response(serializer.errors)

	def destroy(self, request, pk=None):
		id = pk
		stu = Student.objects.get(pk=id)
		stu.delete()
		return Response({'msg':'Data Deleted'})



Attribute
------------------------------
class StudentViewSet(viewsets.ViewSet):
	def list(self, request):
		print("---------  List  ----------")
		print('Basename', self.basename)
		print('Action', self.action)
		print('Detail', self.detail)
		print('Suffix', self.suffix)
		print('Name', self.name)
		print('Description', self.description)

		stu = Student.objects.all()
		serializer = StudentSerializer(stu, many=True)
		return Response(serializer.data)