Deserialization

Deserialization and Insert Data

Serializers are also responsible for deserialization which means it allows parsed data to be converted back into complex types, after first validating the incoming data.

Json Data ---> Python Native DataType ---> Complex DataType

BytesIO() - A stream implementation using an in-memory bytes buffer. It inherits BufferedIOBase. The buffer is discarded when the close() method is called.

import io
stream = io.BytesIO(json_data)

JSONParser() - This is used to parsed json data to python native data type.

from rest_framework.parsers import JSONParser
parsed_data = JSONParser().parse(stream)

Creating Serializer Object
serializer = StudentSerializer(data = parsed_data)

Validated Data
serializer.is_valid()
serializer.validated_data

If error occures during validation
serializer.errors

Create Data/ Insert Data
------------------------
'serializers.py'

from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.Serializer):
	name = serializers.CharField(max_length = 100)
	roll = serializers.IntegerField()
	city = serializers.CharField(max_length = 10)

	def create(self, validate_data):
		return Student.objects.create(**validate_data)


Update Data
------------------------

from rest_framework import serializers
from .models import Student

class StudentSerializer(serializers.Serializer):
	name = serializers.CharField(max_length = 100)
	roll = serializers.IntegerField()
	city = serializers.CharField(max_length = 10)

	def update(self, instance, validate_data):
		instance.name = validated_data.get('name', instance.name)
		instance.roll = validated_data.get('roll', instance.roll)
		instance.city = validated_data.get('city', instance.city)
		instance.save()
		return instance

	Complete Update Data
	------------------------
	By default, serializers must be passed values for all required fields fields or they will raise validation errors.

	Required all Data from FrontEnd/Client
	if serializer.is_valid():
		serializer.save()

	Partial Update Data
	------------------------
	serializer = StudentSerializer(stu, data = pythondata, partial = True)

	if serializer.is_valid():
		serializer.save()